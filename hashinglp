#include <stdio.h>
#define SIZE 10 // Size of the hash table

int hash(int key) {
    return key % SIZE;
}

void insert(int hashTable[], int key, int data) {
    int index = hash(key);

    // Linear probing to find an empty slot
    while (hashTable[index] != -1) {
        index = (index + 1) % SIZE;
    }

    // Insert the key and data at the empty slot
    hashTable[index] = data;
}

int search(int hashTable[], int key) {
    int index = hash(key);

    // Linear probing to find the key
    while (hashTable[index] != key) {
        if (hashTable[index] == -1) {
            return -1; // Key not found
        }
        index = (index + 1) % SIZE;
    }

    return hashTable[index]; // Return the data associated with the key
}

void display(int hashTable[]) {
    printf("Hash Table:\n");
    printf("Index\tKey\n");
    for (int i = 0; i < SIZE; i++) {
        printf("%d\t%d\n", i, hashTable[i]);
    }
}

int main() {
    int hashTable[SIZE];
    for (int i = 0; i < SIZE; i++) {
        hashTable[i] = -1; // Initialize all slots to -1 (indicating empty)
    }

    insert(hashTable, 5, 100);
    insert(hashTable, 15, 200);
    insert(hashTable, 25, 300);
    insert(hashTable, 8, 400);

    display(hashTable);

    int key_to_search = 15;
    int result = search(hashTable, key_to_search);
    if (result != -1) {
        printf("Data for key %d: %d\n", key_to_search, result);
    } else {
        printf("Key %d not found.\n", key_to_search);
    }

    return 0;
}
