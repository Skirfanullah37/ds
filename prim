#include <stdio.h>
#include <stdbool.h>

#define MAX_VERTICES 100
#define INFINITY 999999

int graph[MAX_VERTICES][MAX_VERTICES];
int numVertices;

void initializeGraph() {
    for (int i = 0; i < MAX_VERTICES; i++) {
        for (int j = 0; j < MAX_VERTICES; j++) {
            graph[i][j] = INFINITY;
        }
    }
}

void addEdge(int src, int dest, int weight) {
    graph[src][dest] = weight;
    graph[dest][src] = weight;
}

int findMinKey(int key[], bool mstSet[]) {
    int minKey = INFINITY;
    int minKeyIndex;

    for (int v = 0; v < numVertices; v++) {
        if (!mstSet[v] && key[v] < minKey) {
            minKey = key[v];
            minKeyIndex = v;
        }
    }

    return minKeyIndex;
}

void printMST(int parent[]) {
    printf("Edge   Weight\n");
    for (int i = 1; i < numVertices; i++) {
        printf("%d - %d    %d\n", parent[i], i, graph[i][parent[i]]);
    }
}

void primMST() {
    int parent[MAX_VERTICES];
    int key[MAX_VERTICES];
    bool mstSet[MAX_VERTICES];

    for (int i = 0; i < numVertices; i++) {
        key[i] = INFINITY;
        mstSet[i] = false;
    }

    key[0] = 0;
    parent[0] = -1;

    for (int count = 0; count < numVertices - 1; count++) {
        int u = findMinKey(key, mstSet);
        mstSet[u] = true;

        for (int v = 0; v < numVertices; v++) {
            if (graph[u][v] && !mstSet[v] && graph[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }

    printMST(parent);
}

int main() {
    initializeGraph();

    // Example graph representation (add your graph data here)
    numVertices = 5;
    addEdge(0, 1, 2);
    addEdge(0, 3, 6);
    addEdge(1, 2, 3);
    addEdge(1, 3, 8);
    addEdge(1, 4, 5);
    addEdge(2, 4, 7);
    addEdge(3, 4, 9);

    printf("Minimum Spanning Tree:\n");
    primMST();

    return 0;
}
