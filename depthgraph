#include <stdio.h>
#include <stdbool.h>

#define MAX_NODES 100

// Structure to represent an adjacency list node
struct Node {
    int data;
    struct Node* next;
};

// Structure to represent the graph
struct Graph {
    int numNodes;
    struct Node* adjList[MAX_NODES];
    bool visited[MAX_NODES];
};

// Function to initialize the graph
void initGraph(struct Graph* graph, int numNodes) {
    graph->numNodes = numNodes;
    for (int i = 0; i < numNodes; i++) {
        graph->adjList[i] = NULL;
        graph->visited[i] = false;
    }
}

// Function to add an edge to the graph
void addEdge(struct Graph* graph, int src, int dest) {
    // Add edge from src to dest
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = dest;
    newNode->next = graph->adjList[src];
    graph->adjList[src] = newNode;

    // Add edge from dest to src (for undirected graph)
    newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = src;
    newNode->next = graph->adjList[dest];
    graph->adjList[dest] = newNode;
}

// Function to perform DFS traversal
void DFS(struct Graph* graph, int node) {
    graph->visited[node] = true;
    printf("%d ", node);

    struct Node* current = graph->adjList[node];
    while (current != NULL) {
        int nextNode = current->data;
        if (!graph->visited[nextNode]) {
            DFS(graph, nextNode);
        }
        current = current->next;
    }
}

int main() {
    int numNodes, numEdges;
    printf("Enter the number of nodes and edges: ");
    scanf("%d %d", &numNodes, &numEdges);

    struct Graph graph;
    initGraph(&graph, numNodes);

    printf("Enter %d edges in the format (src dest):\n", numEdges);
    for (int i = 0; i < numEdges; i++) {
        int src, dest;
        scanf("%d %d", &src, &dest);
        addEdge(&graph, src, dest);
    }

    int startNode;
    printf("Enter the starting node for DFS traversal: ");
    scanf("%d", &startNode);

    printf("DFS traversal starting from node %d: ", startNode);
    DFS(&graph, startNode);
    printf("\n");

    return 0;
}
