#include <stdio.h>
#include <stdbool.h>

#define INFINITY 9999
#define MAX_NODES 100

int graph[MAX_NODES][MAX_NODES];
int numNodes;

void initializeGraph() {
    for (int i = 0; i < MAX_NODES; i++) {
        for (int j = 0; j < MAX_NODES; j++) {
            graph[i][j] = INFINITY;
        }
    }
}

void addEdge(int src, int dest, int weight) {
    graph[src][dest] = weight;
    graph[dest][src] = weight; // Assuming an undirected graph
}

int findMinDistance(int distance[], bool visited[]) {
    int minDistance = INFINITY;
    int minIndex = 0;

    for (int i = 0; i < numNodes; i++) {
        if (!visited[i] && distance[i] < minDistance) {
            minDistance = distance[i];
            minIndex = i;
        }
    }

    return minIndex;
}

void dijkstra(int startNode) {
    int distance[MAX_NODES];
    bool visited[MAX_NODES];

    for (int i = 0; i < numNodes; i++) {
        distance[i] = INFINITY;
        visited[i] = false;
    }

    distance[startNode] = 0;

    for (int count = 0; count < numNodes - 1; count++) {
        int u = findMinDistance(distance, visited);
        visited[u] = true;

        for (int v = 0; v < numNodes; v++) {
            if (!visited[v] && graph[u][v] != INFINITY && distance[u] + graph[u][v] < distance[v]) {
                distance[v] = distance[u] + graph[u][v];
            }
        }
    }

    printf("Shortest distances from node %d:\n", startNode);
    for (int i = 0; i < numNodes; i++) {
        printf("Node %d : Distance = %d\n", i, distance[i]);
    }
}

int main() {
    int numEdges, src, dest, weight, startNode;

    printf("Enter the number of nodes in the graph: ");
    scanf("%d", &numNodes);

    initializeGraph();

    printf("Enter the number of edges in the graph: ");
    scanf("%d", &numEdges);

    for (int i = 0; i < numEdges; i++) {
        printf("Enter edge %d (source destination weight): ", i + 1);
        scanf("%d %d %d", &src, &dest, &weight);
        addEdge(src, dest, weight);
    }

    printf("Enter the starting node: ");
    scanf("%d", &startNode);

    dijkstra(startNode);

    return 0;
}
